using System.Collections;
using UnityEngine;

public class ChunkManager {

    private Queue loadedChunks;
	private int seed;

    public ChunkManager(int seed) {
		this.seed = seed;
        loadedChunks = new Queue();
		//loadedChunks.Add(new Chunk());
	}
	
	/*
		GenerateChunk()
		Parameters: Initial chance for a cell to be occupied, number of times to smooth, number of neighbors required for a birth or death.
		Returns: Newly created chunk containing the cells set as generated by cellular automata.
		Purpose: Create, initialize, and return the chunk so it can be rendered and populated later on.
	*/
	public Chunk GenerateChunk(int position, float biomeNoise) {
		int[,] cells = new int[Chunk.CHUNK_WIDTH, Chunk.CHUNK_HEIGHT];

		InitializeCells(cells, position, biomeNoise);

		return new Chunk(cells);
	}

	/*
		InitializeCells
		Purpose: Sets all cells in map to an initial value of either 0 or 1 based on Perlin noise.
		Parameters: The 2D array of cells to initialize.
	*/
	private void InitializeCells(int[,] grid, int position, float biomeNoise) {
		for (int x = 0; x < Chunk.CHUNK_WIDTH; x++) {
			int height = (int)Mathf.Clamp(Mathf.PerlinNoise(biomeNoise * 0.01f * (position + x), seed) * (float)Chunk.CHUNK_HEIGHT, 1f, (float)(Chunk.CHUNK_HEIGHT - 1));
			int y;
			for (y = 0; y < height; y++)
				grid[x, y] = 0;
			for (; y < Chunk.CHUNK_HEIGHT; y++)
				grid[x, y] = 1;
		}
	}

	public int getSeed() {
		return seed;
	}

}
